# Generated by Django 4.2.17 on 2024-12-13 15:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseLobby',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_id', models.CharField(max_length=10, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('max_rounds', models.IntegerField(default=3)),
                ('round_score_limit', models.IntegerField(default=3)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player1', models.CharField(max_length=255)),
                ('player1_type', models.CharField(max_length=50)),
                ('player2', models.CharField(max_length=255)),
                ('player2_type', models.CharField(max_length=50)),
                ('winner', models.CharField(blank=True, max_length=255, null=True)),
                ('winner_type', models.CharField(blank=True, max_length=50, null=True)),
                ('outcome', models.CharField(blank=True, choices=[('Finished', 'Finished'), ('Tie', 'Tie')], max_length=50, null=True)),
                ('player1_score', models.IntegerField(blank=True, null=True)),
                ('player2_score', models.IntegerField(blank=True, null=True)),
                ('tie_resolved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('failed', 'Failed')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('stage', models.CharField(choices=[('Preliminaries', 'Preliminaries'), ('Qualifiers', 'Qualifiers'), ('Quarter Finals', 'Quarter Finals'), ('Semi Finals', 'Semi Finals'), ('Grand Finals', 'Grand Finals'), ('Round Robin Stage', 'Round Robin Stage')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('ongoing', 'Ongoing'), ('completed', 'Completed')], max_length=50)),
                ('matches', models.ManyToManyField(related_name='rounds', to='games.match')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('Single Elimination', 'Single Elimination'), ('Round Robin', 'Round Robin')], max_length=50)),
                ('final_winner', models.CharField(blank=True, max_length=255, null=True)),
                ('final_winner_type', models.CharField(blank=True, max_length=50, null=True)),
                ('all_participants', models.JSONField(blank=True, null=True)),
                ('players_only', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('ongoing', 'Ongoing'), ('completed', 'Completed')], max_length=50)),
                ('winner_determination_method_message', models.TextField(blank=True, null=True)),
                ('tiebreaker_method', models.CharField(blank=True, choices=[('Total Points', 'Total Points'), ('Most Wins', 'Most Wins'), ('Random Selection', 'Random Selection')], max_length=50, null=True)),
                ('winner_tie_resolved', models.BooleanField(default=False)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_tournaments', to=settings.AUTH_USER_MODEL)),
                ('rounds', models.ManyToManyField(related_name='tournaments', to='games.round')),
            ],
        ),
        migrations.CreateModel(
            name='Lobby',
            fields=[
                ('baselobby_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='games.baselobby')),
                ('is_host_ready', models.BooleanField(default=False)),
                ('is_guest_ready', models.BooleanField(default=False)),
                ('host_paddle_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('guest_paddle_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('host_paddle_image', models.ImageField(blank=True, null=True, upload_to='paddle_skins/')),
                ('guest_paddle_image', models.ImageField(blank=True, null=True, upload_to='paddle_skins/')),
                ('guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='joined_lobbies', to=settings.AUTH_USER_MODEL)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_lobbies', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('games.baselobby',),
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player2_name_pvp_local', models.CharField(blank=True, max_length=100, null=True)),
                ('game_mode', models.CharField(choices=[('pve', 'Player vs AI'), ('local_pvp', 'Local Player vs Local Player'), ('online_pvp', 'Online Player vs Online Player'), ('chaos_pve', 'Chaos Player vs AI'), ('chaos_pvp', 'Chaos Player vs Player'), ('online_chaos_pvp', 'Online Chaos Player vs Player'), ('arena_pvp', 'Arena Player vs Player'), ('online_arena_pvp', 'Online Arena Player vs Player')], max_length=20)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('moves_log', models.JSONField(blank=True, null=True)),
                ('rounds', models.JSONField(blank=True, null=True)),
                ('status', models.CharField(choices=[('started', 'Started'), ('running', 'Running'), ('finished', 'Finished'), ('canceled_by_host', 'Canceled by Host'), ('canceled_by_guest', 'Canceled by Guest')], default='started', max_length=20)),
                ('score_player1', models.IntegerField(default=0)),
                ('score_player2', models.IntegerField(default=0)),
                ('score_player3', models.IntegerField(default=0)),
                ('score_player4', models.IntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player1', to=settings.AUTH_USER_MODEL)),
                ('player2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player2', to=settings.AUTH_USER_MODEL)),
                ('player3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player3', to=settings.AUTH_USER_MODEL)),
                ('player4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player4', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_won', to=settings.AUTH_USER_MODEL)),
                ('lobby', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games', to='games.lobby')),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='ChaosLobby',
            fields=[
                ('baselobby_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='games.baselobby')),
                ('is_host_ready', models.BooleanField(default=False)),
                ('is_guest_ready', models.BooleanField(default=False)),
                ('powerup_spawn_rate', models.IntegerField(default=10)),
                ('host_paddle_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('guest_paddle_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('host_paddle_image', models.ImageField(blank=True, null=True, upload_to='paddle_skins/')),
                ('guest_paddle_image', models.ImageField(blank=True, null=True, upload_to='paddle_skins/')),
                ('guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='joined_chaos_lobbies', to=settings.AUTH_USER_MODEL)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_chaos_lobbies', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('games.baselobby',),
        ),
        migrations.CreateModel(
            name='ArenaLobby',
            fields=[
                ('baselobby_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='games.baselobby')),
                ('is_player_one_ready', models.BooleanField(default=False)),
                ('is_player_two_ready', models.BooleanField(default=False)),
                ('is_player_three_ready', models.BooleanField(default=False)),
                ('is_player_four_ready', models.BooleanField(default=False)),
                ('player_one_paddle_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('player_two_paddle_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('player_three_paddle_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('player_four_paddle_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('player_one_paddle_image', models.ImageField(blank=True, null=True, upload_to='paddle_skins/')),
                ('player_two_paddle_image', models.ImageField(blank=True, null=True, upload_to='paddle_skins/')),
                ('player_three_paddle_image', models.ImageField(blank=True, null=True, upload_to='paddle_skins/')),
                ('player_four_paddle_image', models.ImageField(blank=True, null=True, upload_to='paddle_skins/')),
                ('player_four', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='joined_lobbies_p4', to=settings.AUTH_USER_MODEL)),
                ('player_one', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_lobbies_p1', to=settings.AUTH_USER_MODEL)),
                ('player_three', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='joined_lobbies_p3', to=settings.AUTH_USER_MODEL)),
                ('player_two', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='joined_lobbies_p2', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('games.baselobby',),
        ),
    ]
