# Generated by Django 4.2.17 on 2024-12-17 06:42

import accounts.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('points', models.IntegerField(default=0)),
                ('criteria_type', models.CharField(choices=[('stat', 'Stat-based'), ('action', 'Action-based')], max_length=20)),
                ('criteria_key', models.CharField(blank=True, max_length=50, null=True)),
                ('criteria_value', models.IntegerField(blank=True, null=True)),
                ('criteria_expression', models.CharField(blank=True, max_length=255, null=True)),
                ('image_url', models.URLField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_secret', models.CharField(blank=True, max_length=32, null=True)),
                ('is_2fa_enabled', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_user_agent', models.TextField(blank=True, null=True)),
                ('has_logged_in', models.BooleanField(default=False)),
                ('display_name', models.CharField(blank=True, max_length=25, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('is_online', models.BooleanField(default=False)),
                ('xp', models.IntegerField(default=0)),
                ('level', models.IntegerField(default=1)),
                ('is_ft_authenticated', models.BooleanField(default=False)),
                ('games_played', models.IntegerField(default=0)),
                ('games_won', models.IntegerField(default=0)),
                ('games_lost', models.IntegerField(default=0)),
                ('tournaments_participated', models.IntegerField(default=0)),
                ('tournaments_won', models.IntegerField(default=0)),
                ('minutes_played', models.FloatField(default=0.0)),
                ('friends_count', models.IntegerField(default=0)),
                ('blocked_users_count', models.IntegerField(default=0)),
                ('display_name_changed', models.BooleanField(default=False)),
                ('login_streak', models.IntegerField(default=0)),
                ('last_login_date', models.DateField(blank=True, null=True)),
                ('messages_sent', models.IntegerField(default=0)),
                ('games_with_friends', models.IntegerField(default=0)),
                ('paddleskin_color', models.CharField(blank=True, default='#FFFFFF', help_text='Hex code for paddle color.', max_length=7, null=True, validators=[accounts.models.validate_hex_color])),
                ('paddleskin_image', models.ImageField(blank=True, help_text='Image for paddle skin.', null=True, upload_to='paddle_skins/')),
                ('ballskin_color', models.CharField(blank=True, default='#FFFFFF', help_text='Hex code for ball color.', max_length=7, null=True, validators=[accounts.models.validate_hex_color])),
                ('ballskin_image', models.ImageField(blank=True, help_text='Image for ball skin.', null=True, upload_to='ball_skins/')),
                ('gamebackground_color', models.CharField(blank=True, default='#000000', help_text='Hex code for game background color.', max_length=7, null=True, validators=[accounts.models.validate_hex_color])),
                ('gamebackground_wallpaper', models.ImageField(blank=True, help_text='Image for game background wallpaper.', null=True, upload_to='game_backgrounds/')),
                ('blocked_users', models.ManyToManyField(blank=True, related_name='blocked_by', to='accounts.profile')),
                ('friends', models.ManyToManyField(blank=True, related_name='friends_with', to='accounts.profile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('friend_request', 'Friend Request'), ('friend_request_accepted', 'Friend Accept'), ('friend_request_rejected', 'Friend Reject'), ('game_invite', 'Game Invite'), ('arena_invite', 'Arena Invite'), ('tournament', 'Tournament Notification'), ('new_message', 'New Message'), ('system_alert', 'System Alert'), ('level_up', 'Level Up'), ('achievement_unlocked', 'Achievement Unlocked')], max_length=30)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('data', models.JSONField(blank=True, null=True)),
                ('game_type', models.CharField(blank=True, max_length=20, null=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_earned', models.DateTimeField(default=django.utils.timezone.now)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='accounts.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_friend_requests', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_friend_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('sender', 'receiver')},
            },
        ),
    ]
