version: '3.8'

services:

  # Elasticsearch Service
  elasticsearch:
    container_name: elasticsearch
    build:
      context: ./elk/elasticsearch
    # environment:
    #   - discovery.type=single-node
    #   - xpack.security.enabled=true
    #   - bootstrap.memory_lock=true
    #   - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    #   - ELASTIC_PASSWORD=elapwd
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    env_file:
      - .env
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
      # - elasticsearch-service-token:/usr/share/elasticsearch/service_token
      - ./data/elk-shared:/usr/share/elasticsearch/shared
    networks:
      - elk-net
      - host-bridge

  # Logstash Service
  logstash:
    container_name: logstash
    build:
      context: ./elk/logstash
    # network_mode: host
    ports:
      # - "5234:5234"  # For Beats input
      - "5240:5240"  # For GELF input
      - "5240:5240/udp"
      - "5431:5431/udp"
      - "5431:5431"
      - "5959:5959"
    env_file:
      - .env
    volumes:
      #- ./elk/logstash/pipeline:/usr/share/logstash/pipeline
      - ./data/elk-shared:/usr/share/logstash/shared
    depends_on:
      - elasticsearch
    networks:
      # - elk-net
      host-bridge:
        ipv4_address: 172.25.0.10
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      retries: 10
      start_period: 10s
      timeout: 10s

  # Kibana Service
  kibana:
    container_name: kibana
    build:
      context: ./elk/kibana
    ports:
      - "5601:5601"
    # environment:
    #   - KIBANA_ENCRYPTION_KEY=${KIBANA_ENCRYPTION_KEY}
    #   - ELASTICSEARCH_HOSTS=https://localhost:9200
    #   - ELASTICSEARCH_USERNAME=elastic
    #   - ELASTICSEARCH_PASSWORD=elapwd
      # - KIBANA_USER_PASSWORD=kibanapassword
    env_file:
      - .env
    depends_on:
      - elasticsearch
    networks:
      - elk-net
      - host-bridge
    volumes:
      # - elasticsearch-service-token:/usr/share/kibana/service_token
      - ./data/elk-shared:/usr/share/kibana/shared

  # Angular Frontend Service
  angular:
    container_name: angular
    build:
      context: ./fe
    ports:
      - "4200:4200"
    volumes:
      - ./fe:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: ng serve --host 0.0.0.0 --poll 1000
    depends_on:
      logstash:
        condition: service_healthy
    networks:
      - app-net
      - elk-net
      - host-bridge
    logging:
      driver: "gelf"
      options:
        # gelf-address: "udp://172.25.9.10:5240"
        gelf-address: "udp://host.docker.internal:5240"
        tag: "{{.Name}}"


  # Django Backend Service
  django:
    container_name: django
    build:
      context: ./be
    command: >
      sh -c "python manage.py makemigrations games &&
             python manage.py makemigrations accounts &&
             python manage.py migrate &&
             python manage.py loaddata achievements.json &&
             daphne -b 0.0.0.0 -p 8000 be.asgi:application"
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SETTINGS_MODULE=be.settings
      - DOMAIN=localhost
    depends_on:
      # - db
      # redis
      # elasticsearch
      logstash:
        condition: service_healthy
    networks:
      - app-net
      - elk-net
      - host-bridge
    volumes:
      - ./be:/app
      - ./static:/app/static
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://host.docker.internal:5240"
        tag: "{{.Name}}"

  # PostgreSQL Database Service
  db:
    container_name: db
    image: postgres:17
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    depends_on:
      logstash:
        condition: service_healthy
    networks:
      - app-net
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://host.docker.internal:5240"
        tag: "{{.Name}}"

  # Redis Service
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    networks:
      - app-net

networks:
  elk-net:
    driver: bridge
  app-net:
    driver: bridge
  host-bridge:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1

volumes:
  postgres_data:
    driver: local
  esdata:
    driver: local
  # elasticsearch-service-token:
  #   driver: local
  elk-shared:
    driver: local
